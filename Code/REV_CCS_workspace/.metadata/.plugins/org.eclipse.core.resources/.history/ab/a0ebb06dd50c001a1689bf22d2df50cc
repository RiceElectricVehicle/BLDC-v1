#include "driverlib.h"
#include "device.h"

//
// Macros
//
#define ADC_TO_DUTY_CYCLE(ADC_IN)       ADC_IN / 3.3

//
// Global variables
//

struct hall_sensor_t {
    uint32_t A;
    uint32_t B;
    uint32_t C;
} halls;

//
// Function Prototypes
//
__interrupt void NFAULT_ISR(void);
void setupGPIO(void);
void initADC_Drive(void);
void initADC_Input(void);
void initEPWM(void);


void main(void) {
    Device_init();
    Device_initGPIO();              //
    Interrupt_initModule();         // init PIE register, disable cpu interrupts
    Interrupt_initVectorTable();    // initialize interrupts to point to default shell ISRs
    setupGPIO();                    // set up GPIO and Interrupt handlers for BLDC


    while(1) {
        // get hall sensor positions
        halls.A = GPIO_readPin(26);
        halls.B = GPIO_readPin(15);
        halls.C = GPIO_readPin(14);

          // write the
        GPIO_writePin(INLA, halls.A);
        GPIO_writePin(INHB, halls.B);
        GPIO_writePin(INLB, halls.C);

        ADC_TO_DUTY_CYCLE(ADC_readResult(resultBase, socNumber))

    }


}

void setupGPIO(void) {

    /*
     * SPI pinout:
     * 33 -> CS
     * 31 -> MISO
     * 24 -> MOSI
     * 22 -> SCLK
    */

    GPIO_setPadConfig(33, GPIO_PIN_TYPE_PULLUP);
    GPIO_setPadConfig(31, GPIO_PIN_TYPE_PULLUP);
    GPIO_setPadConfig(24, GPIO_PIN_TYPE_PULLUP);
    GPIO_setPadConfig(22, GPIO_PIN_TYPE_PULLUP);
    GPIO_setQualificationMode(33, GPIO_QUAL_ASYNC); // peripheral input, don't sync to SYSCLKOUT
    GPIO_setQualificationMode(31, GPIO_QUAL_ASYNC);
    GPIO_setQualificationMode(24, GPIO_QUAL_ASYNC);
    GPIO_setQualificationMode(22, GPIO_QUAL_ASYNC);
    GPIO_setPinConfig(GPIO_33_SPISTEB);
    GPIO_setPinConfig(GPIO_31_SPISOMIB);
    GPIO_setPinConfig(GPIO_24_SPISIMOB);
    GPIO_setPinConfig(GPIO_22_SPICLKB);


    // DRV Enable -> 12
    GPIO_setPinConfig(DEVICE_CFG_DRV_ENABLE);
    GPIO_setPadConfig(DRV_ENABLE_GPIO_PIN, GPIO_PIN_TYPE_PULLUP);
    GPIO_setDirectionMode(DRV_NFAULT_GPIO_PIN, GPIO_DIR_MODE_OUT);


    // DRV nFAULT -> 34
    GPIO_setPinConfig(DEVICE_CFG_NFAULT);
    GPIO_setDirectionMode(DRV_NFAULT_GPIO_PIN, GPIO_DIR_MODE_IN);

    Interrupt_register(INT_XINT1, &NFAULT_ISR);     // assign interrupt handler for nFAULT to function in this file
    Interrupt_enable(INT_XINT1);                    // enable an XINT interrupt
    GPIO_setInterruptPin(DRV_NFAULT_GPIO_PIN, GPIO_INT_XINT1);  //assign DRV enable pin to that XINT interrupt
    GPIO_setInterruptType(GPIO_INT_XINT1, GPIO_INT_TYPE_FALLING_EDGE);  //set everything on XINT1 to use falling edge


    /* DRV PWM Output Pinmap:
     * 0 -> INHA
     * 1 -> INLA
     * 6 -> INHB
     * 7 -> INLB
     * 2 -> INHC
     * 3 -> INLC
     */
    GPIO_setPinConfig(GPIO_0_EPWM1A);
    GPIO_setPinConfig(GPIO_1_EPWM1B);
    GPIO_setPinConfig(GPIO_6_EPWM4A);
    GPIO_setPinConfig(GPIO_7_EPWM4B);
    GPIO_setPinConfig(GPIO_2_EPWM2A);
    GPIO_setPinConfig(GPIO_3_EPWM2B);
    GPIO_setDirectionMode(0, GPIO_DIR_MODE_OUT);
    GPIO_setDirectionMode(1, GPIO_DIR_MODE_OUT);
    GPIO_setDirectionMode(6, GPIO_DIR_MODE_OUT);
    GPIO_setDirectionMode(7, GPIO_DIR_MODE_OUT);
    GPIO_setDirectionMode(2, GPIO_DIR_MODE_OUT);
    GPIO_setDirectionMode(3, GPIO_DIR_MODE_OUT);



    // Hall Sensor Inputs (For now, using GPIO not QEP for inputs) :
    // 26 -> HALL A
    // 15 -> HALL B
    // 14 -> HALL C

    GPIO_setPinConfig(GPIO_26_GPIO26);
    GPIO_setPinConfig(GPIO_15_GPIO15);
    GPIO_setPinConfig(GPIO_14_GPIO14);
    GPIO_setDirectionMode(26, GPIO_DIR_MODE_IN);
    GPIO_setDirectionMode(15, GPIO_DIR_MODE_IN);
    GPIO_setDirectionMode(14, GPIO_DIR_MODE_IN);
    GPIO_setQualificationPeriod(24, 2);            // Qualification period = SYSCLKOUT/2
    GPIO_setQualificationPeriod(8, 2);
    GPIO_setQualificationMode(26, GPIO_QUAL_6SAMPLE);   // 6 consistent samples before qualification
    GPIO_setQualificationMode(15, GPIO_QUAL_6SAMPLE);
    GPIO_setQualificationMode(14, GPIO_QUAL_6SAMPLE);


}

void initADC_Drive(void) {
    /*
     * Setup for ADCs and EPWM triggers used for capturing VSense and ISense
     */


    //
    // Set up ADC_C
    //
    ADC_setVREF(ADCC_BASE, ADC_REFERENCE_INTERNAL, ADC_REFERENCE_3_3V);         // set ADC_C VREF to internal 3.3V (potentiometer ADC channel)
    ADC_setPrescaler(ADCC_BASE, ADC_CLK_DIV_2_0);
    ADC_setInterruptPulseMode(ADCC_BASE, ADC_PULSE_END_OF_CONV);

    ADC_enableConverter(ADCC_BASE);     // power on ADC
    DEVICE_DELAY_US(1000);  // recommended delay to allow ADC to start up

    EPWM_disableADCTrigger(EPWM1_BASE, EPWM_SOC_A);     // disable EPWM SOC-A
    EPWM_setADCTriggerSource(EPWM1_BASE, EPWM_SOC_A, EPWM_SOC_TBCTR_U_CMPA);       // set ADC-C to trigger from EPWM1 SOC A count up event
    EPWM_setADCTriggerEventPrescale(EPWM1_BASE, EPWM_SOC_A, 1);                    // configure SOC 1 prescaler (fires every time)

    EPWM_setCounterCompareValue(EPWM1_BASE, EPWM_COUNTER_COMPARE_A, 0x0800);    // sets Compare A register value to 2048
    EPWM_setTimeBasePeriod(EPWM1_BASE, 0x1000);                                 // sets timer period to 4096

    EPWM_setTimeBaseCounterMode((EPWM1_BASE, EPWM_COUNTER_MODE_STOP_FREEZE);     // turn off the counter until later

    ADC_setupSOC(ADCC_BASE, ADC_SOC_NUMBER0, ADC_TRIGGER_EPWM1_SOCA, ADC_CH_ADCIN0, 10);         // connect SOC0 of ADCC to EPWM1_SOCA signal

    ADC_setInterruptSource(ADCC_BASE, ADC_INT_NUMBER1, ADC_SOC_NUMBER0);
    ADC_enableInterrupt(ADCC_BASE, ADC_INT_NUMBER1);
    ADC_clearInterruptStatus(ADCC_BASE, ADC_INT_NUMBER1);



    //
    // Set up ADC_A
    //
    ADC_setVREF(ADCA_BASE, ADC_REFERENCE_INTERNAL, ADC_REFERENCE_3_3V);         // set ADC_C VREF to internal 3.3V (potentiometer ADC channel)
    ADC_setPrescaler(ADCA_BASE, ADC_CLK_DIV_2_0);
    ADC_setInterruptPulseMode(ADCA_BASE, ADC_PULSE_END_OF_CONV);

    ADC_enableConverter(ADCA_BASE);     // power on ADC A
    DEVICE_DELAY_US(1000);  // recommended delay to allow ADC to start up

    EPWM_disableADCTrigger(EPWM2_BASE, EPWM_SOC_A);     // disable EPWM SOC-A
    EPWM_setADCTriggerSource(EPWM1_BASE, EPWM_SOC_A, EPWM_SOC_TBCTR_U_CMPA);       // set ADC-C to trigger from EPWM1 SOC A count up event
    EPWM_setADCTriggerEventPrescale(EPWM1_BASE, EPWM_SOC_A, 1);                    // configure SOC 1 prescaler (fires every time)

    EPWM_setCounterCompareValue(EPWM1_BASE, EPWM_COUNTER_COMPARE_A, 0x0800);    // sets Compare A register value to 2048
    EPWM_setTimeBasePeriod(EPWM1_BASE, 0x1000);                                 // sets timer period to 4096

    EPWM_setTimeBaseCounterMode((EPWM1_BASE, EPWM_COUNTER_MODE_STOP_FREEZE);     // turn off the counter until later

    }

}

void initADC_Input(void){
        ADC_setVREF(ADCB_BASE, ADC_REFERENCE_INTERNAL, ADC_REFERENCE_3_3V);         // set ADC_C VREF to internal 3.3V (potentiometer ADC channel)
        ADC_setPrescaler(ADCB_BASE, ADC_CLK_DIV_8_0);
        ADC_setInterruptPulseMode(ADCB_BASE, ADC_PULSE_END_OF_CONV);

        ADC_enableConverter(ADCB_BASE);     // power on ADC
        DEVICE_DELAY_US(1000);  // recommended delay to allow ADC to start up
}

__interrupt void NFAULT_ISR(void){
    // Executes on each falling edge of nFault

    Interrupt_clearACKGroup(INTERRUPT_ACK_GROUP1);      // clear the interrupt flag
}
